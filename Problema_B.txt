.include "m328pdef.inc"

.cseg

    .org 0x0000
    rjmp INICIO

    .org 0x0012
    rjmp overflow
	.org 0x001A
	rjmp overflow2

	.org 0x0100
		rjmp INICIO




INICIO:
    LDI r16, HIGH(RAMEND)
    OUT SPH, r16
    LDI r16, LOW(RAMEND)
    OUT SPL, r16

    LDI r16, 0x00
    STS TCCR2A, r16
    LDI r16, 0x01
    STS TCCR2B, r16
    LDI r16, 0x01
    STS TIMSK2, r16

	LDI r16, 0x00
    STS TCCR1A, r16
    LDI r16, 0x05
    STS TCCR1B, r16
    LDI r16, 0x01
    STS TIMSK1, r16

	lds  r16, PCICR
    ori  r16, (1<<PCIE2)|(1<<PCIE1)
    sts  PCICR, r16

 
    sei

    LDI r16, 0xFF
    OUT DDRD, r16

    LDI r16, 0xFF
    OUT DDRB, r16

    ldi r16, 0xFF
    out DDRC, r16

	ldi r16, 0x00
	OUT PORTB, r16

	ldi r16, 0x00
	OUT PORTC, r16
	ldi r22, 0
	ldi r19, 0
	ldi r18, 0
    JMP PRINCIPAL

	clr  r26        ; X.low  = 0   (COL_BASE)
	clr  r27        ; X.high = 0



PRINCIPAL:
	
    RJMP PRINCIPAL



overflow:
	cli
		; Z = H<<1
	ldi  r30, low(H<<1)
	ldi  r31, high(H<<1)

	; Z += X  (r27:r26)
	add  r30, r26
	adc  r31, r27

	; Z += r22  (columna multiplex 0..7)
	add  r30, r22
	adc  r31, r1   ; r1=0 por convención

	; leer columna actual
	lpm  r23, Z
    ; --- avanzás el puntero/contador como ya tenías ---
    inc  r22
    cpi  r22, 8
    brlo f
      ldi  r30, low(H<<1)
      ldi  r31, high(H<<1)
      ldi  r22, 0
f:

    ; === Leer patrón de programa ===
    lpm  r23, Z+               ; r23 = [bits7..0] del patrón

    ; ======= PORTB: poner bits7..6 -> PB5..PB4 =======
    mov  r20, r23
    andi r20, 0b11000000       ; aislar bits 7..6
    lsr  r20                   ; desplazarlos a PB5..PB4
    lsr  r20                   ; (>>2)

    in   r16, PORTB            ; R-M-W: preservar otros bits
    andi r16, 0b11001111       ; limpiar PB5|PB4 (bit5 y bit4)
    or   r16, r20              ; mezclar nuevos bits en PB5..PB4
    out  PORTB, r16

    ; ======= PORTC: poner bits5..0 -> PC5..PC0 =======
    mov  r21, r23
    andi r21, 0b00111111       ; aislar bits 5..0 (ya alineados a PC5..PC0)

    in   r17, PORTC            ; R-M-W
    andi r17, 0b11000000       ; limpiar PC5..PC0 (dejar PC7..PC6 intactos)
    or   r17, r21
    out  PORTC, r17

	rcall prender
	
 
	sei
	
    reti


prender:
    push r30
    push r31
    push r19
    push r20
    push r21
    push r16
    push r17

    ; Z -> ROW_MASK + r22 (tabla en PROGMEM)
    ldi  r30, low(ROW_MASK<<1)
    ldi  r31, high(ROW_MASK<<1)
    add  r30, r22
    adc  r31, r1   

    lpm  r19, Z                ; r19 = máscara: [PD7..PD4 | PC3..PC0]

    ; ------ PORTC: aplicar nibble bajo (PC0..PC3) ------
    mov  r20, r19
    andi r20, 0x0F             ; aislar PC3..PC0
    in   r16, PORTB           ; R-M-W: preservar PC7..PC4
    andi r16, 0xF0             ; limpiar solo PC3..PC0
    or   r16, r20              ; setear el bit seleccionado
    out  PORTB, r16

    ; ------ PORTD: aplicar nibble alto (PD7..PD4) ------
    mov  r21, r19
    andi r21, 0xF0             ; aislar PD7..PD4
    in   r17, PORTD            ; R-M-W: preservar PD3..PD0
    andi r17, 0x0F             ; limpiar solo PD7..PD4
    or   r17, r21              ; setear el bit seleccionado
    out  PORTD, r17

    pop  r17
    pop  r16
    pop  r21
    pop  r20
    pop  r19
    pop  r31
    pop  r30

	ret
	

overflow2:
    adiw r26, 1           
    andi r26, 0x3F         
    clr  r27              
    reti



	.org 0x320 ROW_MASK:
		.db 0b00001000, 0b00000100, 0b00000010, 0b00000001, 0b10000000, 0b01000000, 0b00100000, 0b00010000
	
			; === Column tables, active-low (negado), left→right ===
		.org 0x0500

		; H: barras a los lados + barra horizontal al medio (fila 3)
		H:
			.db 0b00000000, 0b11101111, 0b11101111, 0b11101111, \
				0b11101111, 0b11101111, 0b11101111, 0b00000000

		; O: borde hueco
		O:
			.db 0b00000000, 0b01111110, 0b01111110, 0b01111110, \
				0b01111110, 0b01111110, 0b01111110, 0b00000000

		; L: barra izquierda + base
		L:
			.db 0b00000000, 0b11111110, 0b11111110, 0b11111110, \
				0b11111110, 0b11111110, 0b11111110, 0b11111110

		; A: barra arriba + barra media (fila 3) + laterales
		A:
			.db 0b00000000, 0b01101111, 0b01101111, 0b01101111, \
				0b01101111, 0b01101111, 0b01101111, 0b00000000

		; J: barra arriba + lateral derecho + “gancho” abajo
		J:
			.db 0b01111110, 0b01111110, 0b01111111, 0b01111111, \
				0b01111111, 0b01111111, 0b01111111, 0b00000000

		; E: barra izquierda + arriba/medio/abajo
		E:
			.db 0b00000000, 0b01101110, 0b01101110, 0b01101110, \
				0b01101110, 0b01101110, 0b01101110, 0b01101110

		; S: arriba + medio + abajo y laterales alternados
		S:
			.db 0b01111110, 0b01111111, 0b01111101, 0b01111111, \
				0b01111111, 0b10111111, 0b11111110, 0b00000000

		; U: laterales + base
		U:
			.db 0b00000000, 0b11111110, 0b11111110, 0b11111110, \
				0b11111110, 0b11111110, 0b11111110, 0b00000000

