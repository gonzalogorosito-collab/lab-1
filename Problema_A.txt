 .include "m328pdef.inc"
	.cseg

    .org 0x0000
	    rjmp INICIO

	.org  0x001A
		rjmp CAMBIAR_ESTADO

	.equ S_ESPERA        = 0  ; 1. En espera – Sistema listo, esperando inicio
	.equ S_CINTA		 = 1   ; 2. Cinta – La cinta transporta la pieza
	.equ S_PUNZONADO     = 2   ; 3. Punzonado – Activación del punzón
	.equ S_CINTA_INVERSA = 3 ; 3. Punzonado – Subirlo cuando termine el timer
	.equ S_ESPERA2        = 4  ; 1. En espera – Sistema listo, esperando inicio
	.equ S_PUNZONADO2     = 5   ; 3. Punzonado – Activación del punzón
	;DEFINIR UNA SECCION PARA LAS POSIBLES ENTRADAS

	
	.equ MOVER_CINTA = (1<<PD6) | (0<<PD5) | (0<<PD4)
	.equ MOVER_PUNZONADORA = (0<<PD6) | (1<<PD5) | (0<<PD4)
	.equ APAGAR_PUNZONADORA = (0<<PD6) | (0<<PD5) | (0<<PD4)
	.equ MOVER_CINTA_INVERSA = (0<<PD6) | (0<<PD5) | (1<<PD4) 

	.def ESTADO= r20
	.def EVENTO= r21

	.org 0x200
		rjmp INICIO


	.equ A = 1
	.equ B = 2
	.equ C =  3
	.equ D = 4
	.equ E = 5
	.equ F = 6
	.equ G = 0
	.equ H = 0
	.equ I = 0

	.equ T0_PRELOADL = low(65000)
	.equ T0_PRELOADH = High(65000)
; HASTA AQUI CONFIGURAMOS LOS DATOS A UTILIZAR PARA REALIZAR LAS INTERRUPCIONES


INICIO:
`	ldi r16, high(RAMEND) ; Inicializamos en STACK
	out SPH, r16
	ldi r16, low(RAMEND)
	out SPL, r16 
	
	; Timer1 en modo normal
    LDI r16, 0x00
    STS TCCR1A, r16

    ; Prescaler = clk/1 (puedes usar clk/1024 para hacerlo más lento)
    LDI r16, 0x05
    STS TCCR1B, r16

	; Habilitar interrupción por desbordamiento de Timer1
    LDI r16, (1<<TOIE1)
    STS TIMSK1, r16


	sei

	

	
	; --- PORTD: PD6, PD5, PD4 como salidas ---
	ldi  r16, (1<<PD6)|(1<<PD5)|(1<<PD4)
	out  DDRD, r16
	
	ldi EVENTO, 0
	
	ldi ESTADO, S_ESPERA
	

    rjmp main


; La inicialización donde configuramos, los pines que se van a comportar como salida y entrada en el cidgo, y el timer





main:     
	;Switch para saber que hacer
	
	;rcall retardo ; POR AHORA NO ES NCEARIO

	cpi  ESTADO, S_ESPERA
    breq ST_ESPERA

	cpi  ESTADO, S_ESPERA2
    breq ST_ESPERA2

    cpi  ESTADO, S_CINTA
    breq ST_CINTA

	cpi  ESTADO, S_PUNZONADO 
    breq ST_PUNZONADORA

	cpi  ESTADO, S_PUNZONADO2 
    breq ST_PUNZONADORA2

	cpi ESTADO, S_CINTA_INVERSA 
	breq ST_CINTA_INVERSA 


    rjmp main

; En el main se evalúa el evento, y según que evento este activa las salidas


ST_ESPERA: 
	;sbi PORTD, PD6
    ldi r16, APAGAR_PUNZONADORA 
	out PORTD, r16
    rjmp main

ST_CINTA:
	ldi r16, MOVER_CINTA
	out PORTD, r16
    rjmp main

ST_ESPERA2: 
	;sbi PORTD, PD6
    ldi r16, APAGAR_PUNZONADORA 
	out PORTD, r16
    rjmp main

ST_PUNZONADORA:
	ldi r16, MOVER_PUNZONADORA
	out PORTD, r16
    rjmp main

ST_PUNZONADORA2:
	ldi r16, MOVER_PUNZONADORA
	out PORTD, r16
    rjmp main
